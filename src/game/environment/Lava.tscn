[gd_scene load_steps=8 format=2]

[ext_resource path="res://assets/textures/lava.png" type="Texture" id=1]
[ext_resource path="res://src/game/environment/Lava.gd" type="Script" id=2]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 14.9937, 10.704 )

[sub_resource type="Shader" id=4]
code = "// 2D liquid inside 'sphere' shader.

// Original Author: Mirza Beig
// Godot Implementation: RuverQ

// https://twitter.com/TheMirzaBeig
// https://www.youtube.com/@MirzaBeig

// https://twitter.com/RuverQuack

// Feel free troveto use this however you want.
// Modify, learn from it, copy-paste, etc...

// Original Shadertoy: https://www.shadertoy.com/view/Ds3BRN

shader_type canvas_item;

const float PI = 3.14;

uniform sampler2D mask_texture;
//uniform float tile_factor = 10.0;
//uniform float aspect_ratio = 0.5;
uniform vec2 time_factor = vec2(1.0, 2.0);
uniform vec2 offset_factor = vec2(5.0, 2.0);
uniform vec2 amplitude = vec2(0.01, 0.01);

void fragment() {
    vec2 uv = UV / -.1;//((UV / -0.10)) + vec2(1.25,1.25);

    float
		//sdf=length(uv),
		//c=1.0,//step(sdf,.85),

        vB=smoothstep(.1,.9,sin(uv.x+(PI*.5))-.3),
		vBA=vB*sin(TIME*4.)*.08,

        fW=(sin(((TIME*2.)+uv.x)*2.)*.05)+vBA,
		bW=(sin(((TIME*-2.)+uv.x)*2.+PI)*.05)-vBA,

        fA=(sin(TIME*4.)*.05)*vB,

        fP=(sin((TIME)*PI)*.1) - 0.2,

        fF=step(uv.y,(fA+fW)+fP),//fF=step(uv.y,(fA+fW)+fP)*c,
		bF=step(uv.y,(-fA+bW)+fP);//bF=step(uv.y,(-fA+bW)+fP)*c;

//    COLOR =
//		vec4(
//			0.12//(step(sdf,1.)-step(sdf,.9)) 
//			+ (fF+(clamp(bF-fF,0.,1.)*.8))
//			+ clamp(pow((.01) * ((1.-(fF+bF))),5.), //+ clamp(pow((sdf+.01) * ((1.-(fF+bF))),5.), //+ clamp(pow((sdf+.01) * ((1.-(fF+bF))*c),5.), 
//		0., 
//		1.));

//	COLOR.a = 0.12//(step(sdf,1.)-step(sdf,.9)) 
//			+ (fF+(clamp(bF-fF,0.,1.)*.8))
//			+ clamp(pow((.01) * ((1.-(fF+bF))),5.), //+ clamp(pow((sdf+.01) * ((1.-(fF+bF))),5.), //+ clamp(pow((sdf+.01) * ((1.-(fF+bF))*c),5.), 
//		0., 
//		1.);



	
	vec2 tiled_uvs = UV;// * tile_factor;
	//tiled_uvs.y *= aspect_ratio;
	
	vec2 wave_uv_offset;
	wave_uv_offset.x += sin(TIME * time_factor.x + (tiled_uvs.x + tiled_uvs.y) * offset_factor.x);
	wave_uv_offset.y += cos(TIME * time_factor.y + (tiled_uvs.x + tiled_uvs.y) * offset_factor.y);
	
	//COLOR = texture(TEXTURE, tiled_uvs + wave_uv_offset * amplitude);


	vec4 colour = texture(TEXTURE, tiled_uvs + wave_uv_offset * amplitude);

	//vec4 colour = texture(TEXTURE, UV);
	colour.a *= 0.//(step(sdf,1.)-step(sdf,.9)) 
			+ (fF+(clamp(bF-fF,0.,1.)*.58))
			+ clamp(pow((.01) * ((1.-(fF+bF))),5.), //+ clamp(pow((sdf+.01) * ((1.-(fF+bF))),5.), //+ clamp(pow((sdf+.01) * ((1.-(fF+bF))*c),5.), 
		0., 
		1.);

	COLOR = colour;
	
	
}

//const float PI = 3.14;
//// fV = fill value
//uniform float fV;
//void fragment() {
//    vec2 uv = ((UV / -0.10)) + vec2(1.25,1.25);
//
//    float
//		sdf=length(uv),c=step(sdf,.85),
//
//        vB=smoothstep(.1,.9,sin(uv.x+(PI*.5))-.3),
//		vBA=vB*sin(TIME*4.)*.1,
//
//        fW=(sin(((TIME*2.)+uv.x)*2.)*.05)+vBA,
//		bW=(sin(((TIME*-2.)+uv.x)*2.+PI)*.05)-vBA,
//
//        fA=(sin(TIME*4.)*.05)*vB,
//
//        fP=fV * 2.3 +(sin((TIME)*PI)*.1) - 1.1,
//
//        fF=step(uv.y,(fA+fW)+fP)*c,
//		bF=step(uv.y,(-fA+bW)+fP)*c;
//
//    COLOR =
//		vec4(
//			(step(sdf,1.)-step(sdf,.9)) + (fF+(clamp(bF-fF,0.,1.)*.8))
//		+ clamp(pow((sdf+.01) * ((1.-(fF+bF))*c),5.), 0., 1.));
//}

//uniform sampler2D mask_texture;
//void fragment() {
//	vec4 colour = texture(TEXTURE, UV);
//	colour.a *= texture(mask_texture, UV).a;
//
//	COLOR = colour;
//}


//uniform float progress: hint_range(0.0, 1.0) = 0.5;
//uniform vec4 bg_color;//: source_color;
//uniform vec4 wave_1_color;//: source_color;
//uniform vec4 wave_2_color;//: source_color;
//uniform float wave_1_speed = -1.0;
//uniform float wave_2_speed = 1.0;
//
//vec4 wave( vec2 uv, vec4 wave_color, float level, float freq, float amp, float sin_shift, float speed ){
//	float sinus = sin( (uv.x + sin_shift + TIME * speed) * freq) * amp;
//	float shifted_level = ( 1.0 + 2.0 * amp ) * level - amp; //shift to completely hide or fill
//	float treshold = step( 1.0 - sinus - shifted_level, uv.y);
//	return wave_color * treshold;
//}
//
//void fragment() {
//
//	vec4 wave1 = wave(UV, wave_1_color, progress, 2.5, 0.13, 0.0, wave_1_speed);
//	vec4 wave2 = wave(UV, wave_2_color, progress, 2.0, 0.1, 0.7785*TIME, wave_2_speed);
//
//	vec4 combined_waves = mix(wave1, wave2, wave2.a);
//	COLOR.rgb = mix( bg_color, combined_waves, combined_waves.a ).rgb;
//}

"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/time_factor = Vector2( 1, 2 )
shader_param/offset_factor = Vector2( 5, 2 )
shader_param/amplitude = Vector2( 0.01, 0.01 )

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

// The MIT License
// Copyright Â© 2013 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// Simplex Noise (http://en.wikipedia.org/wiki/Simplex_noise), a type of gradient noise
// that uses N+1 vertices for random gradient interpolation instead of 2^N as in regular
// latice based Gradient Noise.


// Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH
// Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH
// Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH
// Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH
// Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH
// Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS
// Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8
// Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl
// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH
// Wave     Noise 2D             : https://www.shadertoy.com/view/tldSRj

const float velocity = 0.06;

vec2 hash( vec2 p ) // replace this by something better
{
	p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );
	return -.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p )
{
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;

	vec2  i = floor( p + (p.x+p.y)*K1 );
    vec2  a = p - i + (i.x+i.y)*K2;
    float m = step(a.y,a.x); 
    vec2  o = vec2(m,1.0-m);
    vec2  b = a - o + K2;
	vec2  c = a - 1.0 + 2.0*K2;
    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot( n, vec3(70.0) );
}

// -----------------------------------------------

void fragment()
{
	vec2 uv = UV + TIME * velocity;
	
	float f = 0.0;
	
    // left: value noise	
	
	uv *= 5.0;
    mat2 m = mat2( vec2(1.6,  1.2), vec2(-1.2,  1.6) );
	f  = 0.5000*noise( uv ); uv = m*uv;
	f += 0.2500*noise( uv ); uv = m*uv;
	f += 0.1250*noise( uv ); uv = m*uv;
	f += 0.0625*noise( uv ); uv = m*uv;
	

	f = 0.5 + 0.5*f;

	COLOR = vec4( f, f, f, 0.15 );
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[node name="Lava" type="Area2D"]
position = Vector2( -2.38419e-07, 0 )
scale = Vector2( 14.6061, 11.9348 )
collision_layer = 0
script = ExtResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( -5.96046e-08, 0.230413 )
scale = Vector2( 1, 1 )
shape = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 5 )
position = Vector2( -2.46614e-06, -1.29768e-06 )
scale = Vector2( 0.908711, 0.954461 )
texture = ExtResource( 1 )

[node name="ColorRect" type="ColorRect" parent="."]
visible = false
material = SubResource( 3 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -15.0
margin_top = -11.0
margin_right = 15.0
margin_bottom = 11.0
